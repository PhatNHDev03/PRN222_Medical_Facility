@page
@model MedicaiFacility.RazorPage.Pages.Patients.IndexModel
@{
    ViewData["Title"] = "Patient List";
}

<h2>Patient List</h2>

<!-- Loại bỏ nút liên kết đến Create -->
<!-- <p>
    <a asp-page="/Patients/Create" class="btn btn-primary">Create New Patient</a>
</p> -->

<table class="table">
    <thead>
        <tr>
            <th>Patient ID</th>
            <th>User Name</th>
            <th>Date of Birth</th>
            <th>Gender</th>
            <th>Medical History</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var patient in Model.Patients)
        {
            <tr>
                <td>@patient.PatientId</td>
                <td>@patient.PatientNavigation?.FullName</td>
                <td>@patient.DateOfBirth?.ToString("yyyy-MM-dd")</td>
                <td>@patient.Gender</td>
                <td>@patient.MedicalHistory</td>
                <td>
                    <button type="button" class="btn btn-warning btn-sm" onclick="openEditModal(@patient.PatientId)">Edit</button>
                    <button type="button" class="btn btn-danger btn-sm" onclick="openDeleteModal(@patient.PatientId)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Phân trang -->
<div class="pagination">
    @if (Model.CurrentPage > 1)
    {
        <a asp-page="./Index" asp-route-page="@(Model.CurrentPage - 1)" class="btn btn-outline-primary">Previous</a>
    }
    @for (int i = 1; i <= Model.TotalPages; i++)
    {
        <a asp-page="./Index" asp-route-page="@i" class="btn @(Model.CurrentPage == i ? "btn-primary" : "btn-outline-primary")">@i</a>
    }
    @if (Model.CurrentPage < Model.TotalPages)
    {
        <a asp-page="./Index" asp-route-page="@(Model.CurrentPage + 1)" class="btn btn-outline-primary">Next</a>
    }
</div>

<!-- Modal Edit và Delete (không thay đổi) -->
<div id="editModalContainer"></div>
<div id="deleteModalContainer"></div>

@section Scripts {
    <partial name="../Shared/_ValidationScriptsPartial" />
    <script>
        let editModalInstance = null;
        let deleteModalInstance = null;

        async function openEditModal(id) {
            try {
                const response = await fetch(`/Patients/Edit?id=${id}`);
                if (response.ok) {
                    const html = await response.text();
                    const modalContainer = document.getElementById('editModalContainer');
                    modalContainer.innerHTML = html;

                    const modalElement = document.getElementById('editModal');
                    editModalInstance = new bootstrap.Modal(modalElement);
                    editModalInstance.show();

                    const editForm = document.getElementById('editForm');
                    if (editForm) {
                        editForm.addEventListener('submit', async function (e) {
                            e.preventDefault();
                            const formData = new FormData(this);
                            try {
                                const response = await fetch('/Patients/Edit', {
                                    method: 'POST',
                                    body: formData
                                });
                                const result = await response.json();
                                if (result.success) {
                                    alert(result.message);
                                    window.location.href = '/Patients';
                                } else {
                                    alert('Error: ' + result.message);
                                }
                            } catch (error) {
                                console.error('Error submitting form:', error);
                                alert('An error occurred while submitting the form.');
                            }
                        });
                    } else {
                        console.error('Edit form not found in modal.');
                    }

                    modalElement.addEventListener('hidden.bs.modal', function () {
                        modalContainer.innerHTML = '';
                        editModalInstance = null;
                    });
                } else {
                    console.error('Failed to load edit modal:', response.statusText);
                    alert('Failed to load edit modal!');
                }
            } catch (error) {
                console.error('Error loading edit modal:', error);
                alert('An error occurred while loading the edit modal.');
            }
        }

        async function openDeleteModal(id) {
            try {
                const response = await fetch(`/Patients/Delete?id=${id}`);
                if (response.ok) {
                    const html = await response.text();
                    const modalContainer = document.getElementById('deleteModalContainer');
                    modalContainer.innerHTML = html;

                    const modalElement = document.getElementById('deleteModal');
                    deleteModalInstance = new bootstrap.Modal(modalElement);
                    deleteModalInstance.show();

                    const deleteForm = document.getElementById('deleteForm');
                    if (deleteForm) {
                        deleteForm.addEventListener('submit', async function (e) {
                            e.preventDefault();
                            const formData = new FormData(this);
                            try {
                                const response = await fetch('/Patients/Delete', {
                                    method: 'POST',
                                    body: formData
                                });
                                const result = await response.json();
                                console.log('Delete response:', result);
                                if (result.success) {
                                    alert(result.message);
                                    window.location.href = '/Patients';
                                } else {
                                    alert('Error: ' + result.message);
                                }
                            } catch (error) {
                                console.error('Error submitting delete form:', error);
                                alert('An error occurred while submitting the delete form.');
                            }
                        });
                    } else {
                        console.error('Delete form not found in modal.');
                    }

                    modalElement.addEventListener('hidden.bs.modal', function () {
                        modalContainer.innerHTML = '';
                        deleteModalInstance = null;
                    });
                } else {
                    console.error('Failed to load delete modal:', response.statusText);
                    alert('Failed to load delete modal!');
                }
            } catch (error) {
                console.error('Error loading delete modal:', error);
                alert('An error occurred while loading the delete modal.');
            }
        }

        // AJAX cho Create (không áp dụng vì dùng form post)
    </script>
}